{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","lib/dict.ts","components/game/word-raindrop.tsx","components/game/input.tsx","components/game/score-board.tsx","components/game/index.tsx","lib/custom-hooks.ts","lib/game-engine.ts"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","ko2","WordRainDrop","React","memo","props","styles","top","fontSize","undefined","left","right","className","style","word","Input","onEnter","useState","value","setValue","type","onChange","e","target","onKeyPress","key","onClick","ScoreBorad","score","width","marginLeft","Game","words","setWords","setDamage","scoreRef","useRef","heightDivRef","heightRef","useEffect","div","current","clientHeight","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","level","height","offset","Math","floor","i","len","length","filteredWords","filter","damage","newWord","wordRandomIndex","random","horizontalOffset","doInterval","newWords","prev","ref","map","bottom","input","result","slice","checkHit"],"mappings":"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","file":"static/js/3.a51ed164.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export const ko2 = ['사람', '바보', '오리', '된장', '나무', '카드', '타로', '가지'];\n","import React, { CSSProperties } from 'react';\nimport { Word } from '../../lib/game-engine';\n\nconst WordRainDrop = React.memo((props: Word) => {\n  const styles: CSSProperties = {\n    top: props.top,\n    fontSize: '1.2rem',\n  };\n\n  if (props.left !== undefined) {\n    styles.left = props.left;\n  } else if (props.right !== undefined) {\n    styles.right = props.right;\n  } else {\n    styles.left = '50%';\n  }\n\n  return (\n    <span className=\"position-absolute\" style={styles}>\n      {props.word}\n    </span>\n  );\n});\n\nexport default WordRainDrop;\n","import React, { useState } from 'react';\n\nconst Input = React.memo(({ onEnter }: { onEnter: (input: string) => void }) => {\n  const [value, setValue] = useState('');\n\n  const handleEnter = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onEnter(value);\n      setValue('');\n    }\n  };\n\n  return (\n    <div className=\"input-group mb-3\">\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        onKeyPress={handleEnter}\n      />\n      <div className=\"input-group-append\">\n        <button\n          className=\"btn btn-outline-secondary\"\n          type=\"button\"\n          onClick={() => {\n            onEnter(value);\n            setValue('');\n          }}\n        >\n          Enter\n        </button>\n      </div>\n    </div>\n  );\n});\n\nexport default Input;\n","import React from 'react';\n\nconst ScoreBorad = React.memo(({ score }: { score: number }) => {\n  return (\n    <div\n      className=\"position-fixed mt-2 text-center rounded-pill border-theme\"\n      style={{ width: 200, top: 0, left: '50%', marginLeft: -100 }}\n    >\n      점수: {score}\n    </div>\n  );\n});\n\nexport default ScoreBorad;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { useInterval } from '../../lib/custom-hooks';\nimport { doInterval, Word, checkHit } from '../../lib/game-engine';\nimport WordRainDrop from './word-raindrop';\nimport Input from './input';\nimport ScoreBorad from './score-board';\n\nconst Game = React.memo(() => {\n  const [words, setWords] = useState<Word[]>([]);\n  const [damage, setDamage] = useState(0);\n\n  const scoreRef = useRef(0);\n\n  const heightDivRef = useRef<HTMLDivElement>(null);\n  const heightRef = useRef<number>(0);\n\n  useEffect(() => {\n    const div = heightDivRef.current;\n    if (!div) {\n      return;\n    }\n\n    heightRef.current = div.clientHeight;\n  }, []);\n\n  useInterval(() => {\n    const [newWords, damage] = doInterval(words, 1, heightRef.current);\n    setWords(newWords);\n    setDamage((prev) => prev + damage);\n  }, 1500);\n\n  const handleInput = (input: string) => {\n    const result = checkHit(words, input);\n    if (result) {\n      if (scoreRef.current !== null) {\n        // TODO: Need score policy\n        scoreRef.current = scoreRef.current + 10;\n      }\n      setWords(result);\n    }\n  };\n\n  return (\n    <div className=\"h-100 position-relative\" ref={heightDivRef}>\n      <ScoreBorad score={scoreRef.current} />\n\n      {words.map((word, i) => (\n        <WordRainDrop key={i} {...word} />\n      ))}\n\n      <div className=\"position-absolute\" style={{ bottom: 0 }}>\n        <Input onEnter={handleInput} />\n      </div>\n    </div>\n  );\n});\n\nexport default Game;\n","import { useRef, useEffect } from 'react';\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n  const savedCallback = useRef<() => void>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    const tick = () => {\n      if (savedCallback.current) {\n        savedCallback.current();\n      }\n    };\n\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n","import { ko2 } from './dict';\n\nconst ROW_COUNT = 15;\nconst WIDTH = 960; // Make sure this value changes, layout css should be changed\n\nexport interface Word {\n  word: string;\n  top: number;\n  left?: number;\n  right?: number;\n  magic?: string;\n}\n\nexport const doInterval = (words: Word[], level: number, height: number): [Word[], number] => {\n  // Push down the words\n  const offset = Math.floor(height / ROW_COUNT);\n  let i = 0;\n  const len = words.length;\n  for (; i < len; i += 1) {\n    words[i].top += offset;\n  }\n\n  // Remove words hit the bottom and calc damage\n  // TODO: Need bottom margin\n  const filteredWords = words.filter((word) => word.top < height);\n  const damage = filteredWords.length - words.length;\n\n  // Insert a new word\n  const newWord: Word = { word: '', top: 0 };\n  // TODO: Pick a word as level\n  const wordRandomIndex = Math.floor(Math.random() * ko2.length);\n  newWord.word = ko2[wordRandomIndex];\n\n  const horizontalOffset = Math.floor(Math.random() * (WIDTH / 2));\n  if (Math.random() * 2 < 1) {\n    newWord.left = horizontalOffset;\n  } else {\n    newWord.right = horizontalOffset;\n  }\n\n  return [[...filteredWords, newWord], damage];\n};\n\nexport const checkHit = (words: Word[], input: string): Word[] | null => {\n  let i = 0;\n  const len = words.length;\n  for (; i < len; i += 1) {\n    if (words[i].word === input) {\n      return [...words.slice(0, i), ...words.slice(i + 1)];\n    }\n  }\n\n  return null;\n};\n"],"sourceRoot":""}