{"version":3,"sources":["components/game/word-raindrop.tsx","components/game/input.tsx","components/game/score-board.tsx","components/game/blocks.tsx","components/game/index.tsx"],"names":["WordRainDrop","React","memo","forwardRef","props","ref","styles","top","boxTop","fontSize","undefined","left","right","className","style","word","Input","onEnter","useState","value","setValue","inputRef","useRef","useEffect","current","focus","type","onChange","e","target","onKeyPress","key","onBlur","ScoreBorad","score","width","marginLeft","Blocks","damage","Game","words","setWords","running","setRunning","damageRef","scoreRef","heightDivRef","heightRef","blockDivRef","blockAreaRef","calcDamageBoundary","useCallback","divScreen","divInput","clientHeight","inputBox","getBoundingClientRect","useWindowResized","useInterval","doInterval","newWords","MAX_DAMAGE","handleInput","input","result","checkHit","map","i","box","boxBottom","bottom","boxLeft","boxRight","calcBox","zIndex","id","height","display","slot"],"mappings":"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","file":"static/js/3.6928fcb3.chunk.js","sourcesContent":["import React from 'react';\nimport { Word } from '../../lib/game-engine';\n\nconst WordRainDrop = React.memo(\n  React.forwardRef<HTMLSpanElement, Word>((props, ref) => {\n    const styles: React.CSSProperties = {\n      top: props.boxTop,\n      fontSize: '1.2rem',\n    };\n\n    if (props.left !== undefined) {\n      styles.left = props.left;\n    } else if (props.right !== undefined) {\n      styles.right = props.right;\n    } else {\n      styles.left = '50%';\n    }\n\n    return (\n      <span className=\"position-absolute\" style={styles} ref={ref}>\n        {props.word}\n      </span>\n    );\n  })\n);\n\nexport default WordRainDrop;\n","import React, { useState, useRef, useEffect } from 'react';\n\nconst Input = React.memo(({ onEnter }: { onEnter: (input: string) => void }) => {\n  const [value, setValue] = useState('');\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleEnter = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onEnter(value);\n      setValue('');\n    }\n  };\n\n  return (\n    <div className=\"input-group\">\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        onKeyPress={handleEnter}\n        ref={inputRef}\n        onBlur={() => {\n          if (inputRef.current) {\n            inputRef.current.focus();\n          }\n        }}\n      />\n    </div>\n  );\n});\n\nexport default Input;\n","import React from 'react';\n\nconst ScoreBorad = React.memo(({ score }: { score: number }) => {\n  return (\n    <div\n      className=\"position-fixed mt-2 text-center rounded-pill border-theme-2px\"\n      style={{ width: 200, top: 0, left: '50%', marginLeft: -100 }}\n    >\n      점수: {score}\n    </div>\n  );\n});\n\nexport default ScoreBorad;\n","import React from 'react';\nimport './blocks.css';\n\nconst Blocks = React.memo(({ damage }: { damage: number }) => {\n  return (\n    <div className=\"container-fluid blocks rounded\">\n      <div className=\"row\">\n        <div className={`col-4 block ${damage <= -1 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -2 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -3 ? 'broken' : ''}`} />\n      </div>\n      <div className=\"row\">\n        <div className={`col-4 block ${damage <= -4 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -5 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -6 ? 'broken' : ''}`} />\n      </div>\n      <div className=\"row\">\n        <div className={`col-4 block ${damage <= -7 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -8 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -9 ? 'broken' : ''}`} />\n      </div>\n      <div className=\"row \">\n        <div className={`col-4 block ${damage <= -10 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -11 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -12 ? 'broken' : ''}`} />\n      </div>\n    </div>\n  );\n});\n\nexport default Blocks;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useInterval, useWindowResized } from '../../lib/custom-hooks';\nimport { doInterval, Word, checkHit, MAX_DAMAGE } from '../../lib/game-engine';\nimport WordRainDrop from './word-raindrop';\nimport Input from './input';\nimport ScoreBorad from './score-board';\nimport Blocks from './blocks';\nimport Adsense from '../common/adsense';\nimport './game-screen.css';\n\nconst BOTTOM_MARGIN = 20;\n\nconst Game = React.memo(() => {\n  const [words, setWords] = useState<Word[]>([]);\n  const [running, setRunning] = useState(true);\n\n  const damageRef = useRef(0);\n  const scoreRef = useRef(0);\n\n  const heightDivRef = useRef<HTMLDivElement>(null);\n  const heightRef = useRef<number>(0);\n  const blockDivRef = useRef<HTMLDivElement>(null);\n  const blockAreaRef = useRef({ top: 0, left: 0, right: 0 });\n\n  const calcDamageBoundary = useCallback(() => {\n    const divScreen = heightDivRef.current;\n    const divInput = blockDivRef.current;\n    if (!divScreen || !divInput) {\n      return;\n    }\n\n    heightRef.current = divScreen.clientHeight;\n    const inputBox = divInput.getBoundingClientRect();\n    blockAreaRef.current = { top: inputBox.top, left: inputBox.left, right: inputBox.right };\n  }, []);\n\n  useEffect(() => {\n    calcDamageBoundary();\n  }, [calcDamageBoundary]);\n\n  useWindowResized(() => {\n    calcDamageBoundary();\n  });\n\n  useInterval(\n    () => {\n      const [newWords, damage] = doInterval(1, words, heightRef.current, blockAreaRef.current, BOTTOM_MARGIN);\n      if (damageRef.current !== null) {\n        damageRef.current += damage;\n\n        if (damageRef.current === MAX_DAMAGE) {\n          setRunning(false);\n        }\n      }\n      setWords(newWords);\n    },\n    running ? 1500 : null\n  );\n\n  const handleInput = useCallback(\n    (input: string) => {\n      const result = checkHit(words, input);\n      if (result) {\n        if (scoreRef.current !== null) {\n          // TODO: Need score policy\n          scoreRef.current = scoreRef.current + 10;\n        }\n        setWords(result);\n      }\n    },\n    [words]\n  );\n\n  const calcBox = (ref: HTMLSpanElement | null, i: number) => {\n    if (ref) {\n      const box = ref.getBoundingClientRect();\n      words[i].boxBottom = box.bottom;\n      words[i].boxLeft = box.left;\n      words[i].boxRight = box.right;\n    }\n  };\n\n  return (\n    <div className=\"h-100 position-relative\" ref={heightDivRef}>\n      <ScoreBorad score={scoreRef.current} />\n\n      {words.map((word, i) => (\n        <WordRainDrop key={i} {...word} ref={(ref) => calcBox(ref, i)} />\n      ))}\n\n      <div\n        className=\"position-absolute\"\n        style={{ width: 300, bottom: 0, left: '50%', marginLeft: -150, zIndex: 1010 }}\n        ref={blockDivRef}\n      >\n        <Input onEnter={handleInput} />\n        <Blocks damage={damageRef.current} />\n      </div>\n\n      <div className=\"position-absolute w-100\" id=\"wave\" style={{ bottom: 0, height: BOTTOM_MARGIN, zIndex: 1000 }} />\n\n      <div id=\"right-ad\">\n        <Adsense style={{ display: 'inline-block', width: '160px', height: '600px' }} slot=\"8494642588\" />\n      </div>\n    </div>\n  );\n});\n\nexport default Game;\n"],"sourceRoot":""}