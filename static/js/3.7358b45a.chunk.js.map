{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","lib/dict.ts","components/game/word-raindrop.tsx","components/game/input.tsx","components/game/score-board.tsx","components/game/blocks.tsx","components/game/index.tsx","lib/custom-hooks.ts","lib/game-engine.ts"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","ko2","WordRainDrop","React","memo","props","styles","top","fontSize","undefined","left","right","className","style","word","Input","onEnter","useState","value","setValue","inputRef","useRef","useEffect","current","focus","type","onChange","e","target","onKeyPress","key","ref","onBlur","ScoreBorad","score","width","marginLeft","Blocks","damage","Game","words","setWords","running","setRunning","damageRef","scoreRef","heightDivRef","heightRef","div","clientHeight","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","level","height","offset","Math","floor","i","len","length","filteredWords","filter","newWord","wordRandomIndex","random","horizontalOffset","doInterval","newWords","handleInput","useCallback","input","result","slice","checkHit","map","bottom","zIndex"],"mappings":"kMAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,GILvF,IAAMC,EAAM,CACjB,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,gBCvDaC,EArBMC,IAAMC,MAAK,SAACC,GAC/B,IAAMC,EAAwB,CAC5BC,IAAKF,EAAME,IACXC,SAAU,UAWZ,YARmBC,IAAfJ,EAAMK,KACRJ,EAAOI,KAAOL,EAAMK,UACKD,IAAhBJ,EAAMM,MACfL,EAAOK,MAAQN,EAAMM,MAErBL,EAAOI,KAAO,MAId,0BAAME,UAAU,oBAAoBC,MAAOP,GACxCD,EAAMS,SCoBEC,EArCDZ,IAAMC,MAAK,YAAwD,IAArDY,EAAoD,EAApDA,QAAoD,EACpDC,mBAAS,IAD2C,mBACvEC,EADuE,KAChEC,EADgE,KAGxEC,EAAWC,iBAAyB,MAE1CC,qBAAU,WACJF,EAASG,SACXH,EAASG,QAAQC,UAElB,IASH,OACE,yBAAKZ,UAAU,eACb,2BACEa,KAAK,OACLb,UAAU,eACVM,MAAOA,EACPQ,SAAU,SAACC,GAAD,OAAOR,EAASQ,EAAEC,OAAOV,QACnCW,WAdc,SAACF,GACL,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","file":"static/js/3.7358b45a.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export const ko2 = [\n  '가지',\n  '강조',\n  '개미',\n  '결정',\n  '경향',\n  '고기',\n  '관습',\n  '광경',\n  '구월',\n  '금세',\n  '기록',\n  '나름',\n  '나무',\n  '다른',\n  '다시',\n  '된장',\n  '등산',\n  '마찰',\n  '마크',\n  '만족',\n  '맑다',\n  '멀리',\n  '바보',\n  '배달',\n  '번역',\n  '부인',\n  '빼다',\n  '사람',\n  '소년',\n  '소리',\n  '소식',\n  '쇼핑',\n  '수업',\n  '씨앗',\n  '여자',\n  '엽서',\n  '영어',\n  '예보',\n  '예정',\n  '오리',\n  '오빠',\n  '요일',\n  '욕실',\n  '유월',\n  '이런',\n  '입국',\n  '작용',\n  '전공',\n  '정기',\n  '제의',\n  '졸다',\n  '종일',\n  '주차',\n  '중순',\n  '즉석',\n  '지각',\n  '지방',\n  '직선',\n  '차차',\n  '참다',\n  '참외',\n  '천국',\n  '최소',\n  '추측',\n  '출신',\n  '충고',\n  '치약',\n  '카드',\n  '코피',\n  '크기',\n  '큰절',\n  '타로',\n  '하도',\n  '학과',\n  '한창',\n  '해안',\n  '허리',\n  '호박',\n  '후회',\n];\n","import React, { CSSProperties } from 'react';\nimport { Word } from '../../lib/game-engine';\n\nconst WordRainDrop = React.memo((props: Word) => {\n  const styles: CSSProperties = {\n    top: props.top,\n    fontSize: '1.2rem',\n  };\n\n  if (props.left !== undefined) {\n    styles.left = props.left;\n  } else if (props.right !== undefined) {\n    styles.right = props.right;\n  } else {\n    styles.left = '50%';\n  }\n\n  return (\n    <span className=\"position-absolute\" style={styles}>\n      {props.word}\n    </span>\n  );\n});\n\nexport default WordRainDrop;\n","import React, { useState, useRef, useEffect } from 'react';\n\nconst Input = React.memo(({ onEnter }: { onEnter: (input: string) => void }) => {\n  const [value, setValue] = useState('');\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleEnter = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onEnter(value);\n      setValue('');\n    }\n  };\n\n  return (\n    <div className=\"input-group\">\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        onKeyPress={handleEnter}\n        ref={inputRef}\n        onBlur={() => {\n          if (inputRef.current) {\n            inputRef.current.focus();\n          }\n        }}\n      />\n    </div>\n  );\n});\n\nexport default Input;\n","import React from 'react';\n\nconst ScoreBorad = React.memo(({ score }: { score: number }) => {\n  return (\n    <div\n      className=\"position-fixed mt-2 text-center rounded-pill border-theme-2px\"\n      style={{ width: 200, top: 0, left: '50%', marginLeft: -100 }}\n    >\n      점수: {score}\n    </div>\n  );\n});\n\nexport default ScoreBorad;\n","import React from 'react';\nimport './blocks.css';\n\nconst Blocks = React.memo(({ damage }: { damage: number }) => {\n  return (\n    <div className=\"container-fluid blocks rounded\">\n      <div className=\"row\">\n        <div className={`col-4 block ${damage <= -1 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -2 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -3 ? 'broken' : ''}`} />\n      </div>\n      <div className=\"row\">\n        <div className={`col-4 block ${damage <= -4 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -5 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -6 ? 'broken' : ''}`} />\n      </div>\n      <div className=\"row\">\n        <div className={`col-4 block ${damage <= -7 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -8 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -9 ? 'broken' : ''}`} />\n      </div>\n      <div className=\"row \">\n        <div className={`col-4 block ${damage <= -10 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -11 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -12 ? 'broken' : ''}`} />\n      </div>\n    </div>\n  );\n});\n\nexport default Blocks;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useInterval } from '../../lib/custom-hooks';\nimport { doInterval, Word, checkHit, MAX_DAMAGE } from '../../lib/game-engine';\nimport WordRainDrop from './word-raindrop';\nimport Input from './input';\nimport ScoreBorad from './score-board';\nimport Blocks from './blocks';\nimport './game-screen.css';\n\nconst Game = React.memo(() => {\n  const [words, setWords] = useState<Word[]>([]);\n  const [running, setRunning] = useState(true);\n\n  const damageRef = useRef(0);\n  const scoreRef = useRef(0);\n\n  const heightDivRef = useRef<HTMLDivElement>(null);\n  const heightRef = useRef<number>(0);\n\n  useEffect(() => {\n    const div = heightDivRef.current;\n    if (!div) {\n      return;\n    }\n\n    heightRef.current = div.clientHeight;\n  }, []);\n\n  useInterval(\n    () => {\n      const [newWords, damage] = doInterval(words, 1, heightRef.current);\n      if (damageRef.current !== null) {\n        damageRef.current += damage;\n\n        if (damageRef.current === MAX_DAMAGE) {\n          setRunning(false);\n        }\n      }\n      setWords(newWords);\n    },\n    running ? 1500 : null\n  );\n\n  const handleInput = useCallback(\n    (input: string) => {\n      const result = checkHit(words, input);\n      if (result) {\n        if (scoreRef.current !== null) {\n          // TODO: Need score policy\n          scoreRef.current = scoreRef.current + 10;\n        }\n        setWords(result);\n      }\n    },\n    [words]\n  );\n\n  return (\n    <div className=\"h-100 position-relative\" ref={heightDivRef}>\n      <ScoreBorad score={scoreRef.current} />\n\n      {words.map((word, i) => (\n        <WordRainDrop key={i} {...word} />\n      ))}\n\n      <div className=\"position-absolute\" style={{ width: 300, bottom: 0, left: '50%', marginLeft: -150, zIndex: 1010 }}>\n        <Input onEnter={handleInput} />\n        <Blocks damage={damageRef.current} />\n      </div>\n\n      <div className=\"position-absolute w-100\" id=\"wave\" style={{ bottom: 0, height: 20, zIndex: 1000 }} />\n    </div>\n  );\n});\n\nexport default Game;\n","import { useRef, useEffect } from 'react';\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n  const savedCallback = useRef<() => void>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    const tick = () => {\n      if (savedCallback.current) {\n        savedCallback.current();\n      }\n    };\n\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n","import { ko2 } from './dict';\n\nconst ROW_COUNT = 15;\nconst WIDTH = 960; // Make sure this value changes, layout css should be changed\n\nexport const MAX_DAMAGE = -12;\n\nexport interface Word {\n  word: string;\n  top: number;\n  left?: number;\n  right?: number;\n  magic?: string;\n}\n\nexport const doInterval = (words: Word[], level: number, height: number): [Word[], number] => {\n  // Push down the words\n  const offset = Math.floor(height / ROW_COUNT);\n  let i = 0;\n  const len = words.length;\n  for (; i < len; i += 1) {\n    words[i].top += offset;\n  }\n\n  // Remove words hit the bottom and calc damage\n  // TODO: Need bottom margin\n  const filteredWords = words.filter((word) => word.top < height);\n  const damage = filteredWords.length - words.length;\n\n  // Insert a new word\n  const newWord: Word = { word: '', top: 0 };\n  // TODO: Pick a word as level\n  const wordRandomIndex = Math.floor(Math.random() * ko2.length);\n  newWord.word = ko2[wordRandomIndex];\n\n  const horizontalOffset = Math.floor(Math.random() * (WIDTH / 2));\n  if (Math.random() * 2 < 1) {\n    newWord.left = horizontalOffset;\n  } else {\n    newWord.right = horizontalOffset;\n  }\n\n  return [[...filteredWords, newWord], damage];\n};\n\nexport const checkHit = (words: Word[], input: string): Word[] | null => {\n  let i = 0;\n  const len = words.length;\n  for (; i < len; i += 1) {\n    if (words[i].word === input) {\n      return [...words.slice(0, i), ...words.slice(i + 1)];\n    }\n  }\n\n  return null;\n};\n"],"sourceRoot":""}