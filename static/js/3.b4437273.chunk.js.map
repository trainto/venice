{"version":3,"sources":["components/game/word-raindrop.tsx","components/game/input.tsx","components/game/score-board.tsx","components/game/blocks.tsx","components/game/index.tsx"],"names":["WordRainDrop","React","memo","forwardRef","props","ref","styles","top","boxTop","fontSize","undefined","left","right","className","style","word","Input","onEnter","useState","value","setValue","inputRef","useRef","useEffect","current","focus","type","onChange","e","target","onKeyPress","key","onBlur","ScoreBorad","level","score","width","marginLeft","Blocks","damage","Game","words","setWords","running","setRunning","levelRef","damageRef","hitCountPerLevelRef","scoreRef","heightDivRef","heightRef","blockDivRef","blockAreaRef","calcDamageBoundary","useCallback","divScreen","divInput","clientHeight","inputBox","getBoundingClientRect","offsetTop","useWindowResized","useInterval","doInterval","newWords","MAX_DAMAGE","LEVEL","interval","handleInput","input","result","checkHit","levelCompleted","map","i","boxHeight","box","height","boxLeft","boxRight","calcBox","bottom","zIndex","id","display","slot"],"mappings":"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","file":"static/js/3.b4437273.chunk.js","sourcesContent":["import React from 'react';\nimport { Word } from '../../lib/game-engine';\n\nconst WordRainDrop = React.memo(\n  React.forwardRef<HTMLSpanElement, Word>((props, ref) => {\n    const styles: React.CSSProperties = {\n      top: props.boxTop,\n      fontSize: '1.2rem',\n    };\n\n    if (props.left !== undefined) {\n      styles.left = props.left;\n    } else if (props.right !== undefined) {\n      styles.right = props.right;\n    } else {\n      styles.left = '50%';\n    }\n\n    return (\n      <span className=\"position-absolute\" style={styles} ref={ref}>\n        {props.word}\n      </span>\n    );\n  })\n);\n\nexport default WordRainDrop;\n","import React, { useState, useRef, useEffect } from 'react';\n\nconst Input = React.memo(({ onEnter }: { onEnter: (input: string) => void }) => {\n  const [value, setValue] = useState('');\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleEnter = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onEnter(value);\n      setValue('');\n    }\n  };\n\n  return (\n    <div className=\"input-group\">\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        onKeyPress={handleEnter}\n        ref={inputRef}\n        onBlur={() => {\n          if (inputRef.current) {\n            inputRef.current.focus();\n          }\n        }}\n      />\n    </div>\n  );\n});\n\nexport default Input;\n","import React from 'react';\n\nconst ScoreBorad = React.memo(({ level, score }: { level: number; score: number }) => {\n  return (\n    <div\n      className=\"position-fixed mt-2 text-center rounded-pill border-theme-2px\"\n      style={{ width: 300, top: 0, left: '50%', marginLeft: -150 }}\n    >\n      <span>레벨: {level + 1}</span>\n      <span className=\"ml-2\">점수: {score}</span>\n    </div>\n  );\n});\n\nexport default ScoreBorad;\n","import React from 'react';\nimport './blocks.css';\n\nconst Blocks = React.memo(({ damage }: { damage: number }) => {\n  return (\n    <div className=\"container-fluid blocks rounded\">\n      <div className=\"row\">\n        <div className={`col-4 block ${damage <= -1 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -2 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -3 ? 'broken' : ''}`} />\n      </div>\n      <div className=\"row\">\n        <div className={`col-4 block ${damage <= -4 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -5 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -6 ? 'broken' : ''}`} />\n      </div>\n      <div className=\"row\">\n        <div className={`col-4 block ${damage <= -7 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -8 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -9 ? 'broken' : ''}`} />\n      </div>\n      <div className=\"row \">\n        <div className={`col-4 block ${damage <= -10 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -11 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -12 ? 'broken' : ''}`} />\n      </div>\n    </div>\n  );\n});\n\nexport default Blocks;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useInterval, useWindowResized } from '../../lib/custom-hooks';\nimport { doInterval, Word, checkHit, MAX_DAMAGE, LEVEL } from '../../lib/game-engine';\nimport WordRainDrop from './word-raindrop';\nimport Input from './input';\nimport ScoreBorad from './score-board';\nimport Blocks from './blocks';\nimport Adsense from '../common/adsense';\nimport './game-screen.css';\n\nconst BOTTOM_MARGIN = 20;\n\nconst Game = React.memo(() => {\n  const [words, setWords] = useState<Word[]>([]);\n  const [running, setRunning] = useState(true);\n\n  const levelRef = useRef(0);\n  const damageRef = useRef(0);\n  const hitCountPerLevelRef = useRef(0);\n  const scoreRef = useRef(0);\n\n  const heightDivRef = useRef<HTMLDivElement>(null);\n  const heightRef = useRef<number>(0);\n  const blockDivRef = useRef<HTMLDivElement>(null);\n  const blockAreaRef = useRef({ top: 0, left: 0, right: 0 });\n\n  const calcDamageBoundary = useCallback(() => {\n    const divScreen = heightDivRef.current;\n    const divInput = blockDivRef.current;\n    if (!divScreen || !divInput) {\n      return;\n    }\n\n    heightRef.current = divScreen.clientHeight;\n    const inputBox = divInput.getBoundingClientRect();\n    blockAreaRef.current = { top: inputBox.top - divScreen.offsetTop, left: inputBox.left, right: inputBox.right };\n  }, []);\n\n  useEffect(() => {\n    calcDamageBoundary();\n  }, [calcDamageBoundary]);\n\n  useWindowResized(() => {\n    calcDamageBoundary();\n  });\n\n  useInterval(\n    () => {\n      const [newWords, damage] = doInterval(\n        levelRef.current,\n        'ko',\n        words,\n        heightRef.current,\n        blockAreaRef.current,\n        BOTTOM_MARGIN\n      );\n      if (damageRef.current !== null) {\n        damageRef.current += damage;\n\n        if (damageRef.current <= MAX_DAMAGE) {\n          setRunning(false);\n        }\n      }\n      setWords(newWords);\n    },\n    running ? LEVEL[levelRef.current].interval : null\n  );\n\n  const handleInput = useCallback(\n    (input: string) => {\n      const result = checkHit(words, input, levelRef.current, hitCountPerLevelRef.current);\n      if (result) {\n        hitCountPerLevelRef.current += 1;\n        scoreRef.current += result.score;\n        if (result.levelCompleted) {\n          levelRef.current = levelRef.current + 1;\n          hitCountPerLevelRef.current = 0;\n        }\n        setWords(result.words);\n      }\n    },\n    [words]\n  );\n\n  const calcBox = (ref: HTMLSpanElement | null, i: number) => {\n    if (ref) {\n      if (!words[i].boxHeight) {\n        const newWords = [...words];\n        const box = ref.getBoundingClientRect();\n        newWords[i].boxHeight = box.height;\n        newWords[i].boxLeft = box.left;\n        newWords[i].boxRight = box.right;\n        setWords(newWords);\n      }\n    }\n  };\n\n  return (\n    <div className=\"h-100 position-relative\" ref={heightDivRef}>\n      <ScoreBorad level={levelRef.current} score={scoreRef.current} />\n\n      {words.map((word, i) => (\n        <WordRainDrop key={i} {...word} ref={(ref) => calcBox(ref, i)} />\n      ))}\n\n      <div\n        className=\"position-absolute\"\n        style={{ width: 300, bottom: 0, left: '50%', marginLeft: -150, zIndex: 1010 }}\n        ref={blockDivRef}\n      >\n        <Input onEnter={handleInput} />\n        <Blocks damage={damageRef.current} />\n      </div>\n\n      <div className=\"position-absolute w-100\" id=\"wave\" style={{ bottom: 0, height: BOTTOM_MARGIN, zIndex: 1000 }} />\n\n      <div id=\"right-ad\">\n        <Adsense style={{ display: 'inline-block', width: '160px', height: '600px' }} slot=\"8494642588\" />\n      </div>\n    </div>\n  );\n});\n\nexport default Game;\n"],"sourceRoot":""}