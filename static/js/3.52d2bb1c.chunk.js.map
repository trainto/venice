{"version":3,"sources":["components/game/word-raindrop.tsx","components/game/input.tsx","components/game/score-board.tsx","components/game/blocks.tsx","components/game/index.tsx"],"names":["WordRainDrop","React","memo","props","styles","top","fontSize","undefined","left","right","className","style","word","Input","onEnter","useState","value","setValue","inputRef","useRef","useEffect","current","focus","type","onChange","e","target","onKeyPress","key","ref","onBlur","ScoreBorad","score","width","marginLeft","Blocks","damage","Game","words","setWords","running","setRunning","damageRef","scoreRef","heightDivRef","heightRef","div","clientHeight","useInterval","doInterval","newWords","MAX_DAMAGE","handleInput","useCallback","input","result","checkHit","map","i","bottom","zIndex","id","height","display","slot"],"mappings":"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","file":"static/js/3.52d2bb1c.chunk.js","sourcesContent":["import React, { CSSProperties } from 'react';\nimport { Word } from '../../lib/game-engine';\n\nconst WordRainDrop = React.memo((props: Word) => {\n  const styles: CSSProperties = {\n    top: props.top,\n    fontSize: '1.2rem',\n  };\n\n  if (props.left !== undefined) {\n    styles.left = props.left;\n  } else if (props.right !== undefined) {\n    styles.right = props.right;\n  } else {\n    styles.left = '50%';\n  }\n\n  return (\n    <span className=\"position-absolute\" style={styles}>\n      {props.word}\n    </span>\n  );\n});\n\nexport default WordRainDrop;\n","import React, { useState, useRef, useEffect } from 'react';\n\nconst Input = React.memo(({ onEnter }: { onEnter: (input: string) => void }) => {\n  const [value, setValue] = useState('');\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleEnter = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onEnter(value);\n      setValue('');\n    }\n  };\n\n  return (\n    <div className=\"input-group\">\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        onKeyPress={handleEnter}\n        ref={inputRef}\n        onBlur={() => {\n          if (inputRef.current) {\n            inputRef.current.focus();\n          }\n        }}\n      />\n    </div>\n  );\n});\n\nexport default Input;\n","import React from 'react';\n\nconst ScoreBorad = React.memo(({ score }: { score: number }) => {\n  return (\n    <div\n      className=\"position-fixed mt-2 text-center rounded-pill border-theme-2px\"\n      style={{ width: 200, top: 0, left: '50%', marginLeft: -100 }}\n    >\n      점수: {score}\n    </div>\n  );\n});\n\nexport default ScoreBorad;\n","import React from 'react';\nimport './blocks.css';\n\nconst Blocks = React.memo(({ damage }: { damage: number }) => {\n  return (\n    <div className=\"container-fluid blocks rounded\">\n      <div className=\"row\">\n        <div className={`col-4 block ${damage <= -1 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -2 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -3 ? 'broken' : ''}`} />\n      </div>\n      <div className=\"row\">\n        <div className={`col-4 block ${damage <= -4 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -5 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -6 ? 'broken' : ''}`} />\n      </div>\n      <div className=\"row\">\n        <div className={`col-4 block ${damage <= -7 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -8 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -9 ? 'broken' : ''}`} />\n      </div>\n      <div className=\"row \">\n        <div className={`col-4 block ${damage <= -10 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -11 ? 'broken' : ''}`} />\n        <div className={`col-4 block ${damage <= -12 ? 'broken' : ''}`} />\n      </div>\n    </div>\n  );\n});\n\nexport default Blocks;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useInterval } from '../../lib/custom-hooks';\nimport { doInterval, Word, checkHit, MAX_DAMAGE } from '../../lib/game-engine';\nimport WordRainDrop from './word-raindrop';\nimport Input from './input';\nimport ScoreBorad from './score-board';\nimport Blocks from './blocks';\nimport './game-screen.css';\nimport Adsense from '../common/adsense';\n\nconst Game = React.memo(() => {\n  const [words, setWords] = useState<Word[]>([]);\n  const [running, setRunning] = useState(true);\n\n  const damageRef = useRef(0);\n  const scoreRef = useRef(0);\n\n  const heightDivRef = useRef<HTMLDivElement>(null);\n  const heightRef = useRef<number>(0);\n\n  useEffect(() => {\n    const div = heightDivRef.current;\n    if (!div) {\n      return;\n    }\n\n    heightRef.current = div.clientHeight;\n  }, []);\n\n  useInterval(\n    () => {\n      const [newWords, damage] = doInterval(words, 1, heightRef.current);\n      if (damageRef.current !== null) {\n        damageRef.current += damage;\n\n        if (damageRef.current === MAX_DAMAGE) {\n          setRunning(false);\n        }\n      }\n      setWords(newWords);\n    },\n    running ? 1500 : null\n  );\n\n  const handleInput = useCallback(\n    (input: string) => {\n      const result = checkHit(words, input);\n      if (result) {\n        if (scoreRef.current !== null) {\n          // TODO: Need score policy\n          scoreRef.current = scoreRef.current + 10;\n        }\n        setWords(result);\n      }\n    },\n    [words]\n  );\n\n  return (\n    <div className=\"h-100 position-relative\" ref={heightDivRef}>\n      <ScoreBorad score={scoreRef.current} />\n\n      {words.map((word, i) => (\n        <WordRainDrop key={i} {...word} />\n      ))}\n\n      <div className=\"position-absolute\" style={{ width: 300, bottom: 0, left: '50%', marginLeft: -150, zIndex: 1010 }}>\n        <Input onEnter={handleInput} />\n        <Blocks damage={damageRef.current} />\n      </div>\n\n      <div className=\"position-absolute w-100\" id=\"wave\" style={{ bottom: 0, height: 20, zIndex: 1000 }} />\n\n      <div id=\"right-ad\">\n        <Adsense style={{ display: 'inline-block', width: '160px', height: '600px' }} slot=\"8494642588\" />\n      </div>\n    </div>\n  );\n});\n\nexport default Game;\n"],"sourceRoot":""}